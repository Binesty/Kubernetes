apiVersion: v1
kind: Namespace
metadata:
  name: minio
  labels:
    name: minio
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-minio
  namespace: minio
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: slow
  mountOptions:
    - hard
    - nfsvers=4.1
  nfs:
    path: /var/nfs
    server: 192.168.0.150
--- 

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-minio
  namespace: minio  
spec:
  storageClassName: slow
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---

apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  namespace: minio
type: Opaque
data:
  AWS_ACCESS_KEY_ID: bWluaW9hZG1pbg== # minioadmin
  AWS_SECRET_ACCESS_KEY: bWluaW9hZG1pbjg4 # minioadmin88
  AWS_ENDPOINTS: aHR0cDovL21pbmlvLXNlcnZpY2UubWluaW8uc3ZjLmJpbmVzdHk6OTA5MA== # http://minio-service.minio.svc.binesty:9090
---

apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  namespace: longhorn-system
type: Opaque
data:
  AWS_ACCESS_KEY_ID: bWluaW9hZG1pbg== # minioadmin
  AWS_SECRET_ACCESS_KEY: bWluaW9hZG1pbjg4 # minioadmin88
  AWS_ENDPOINTS: aHR0cDovL21pbmlvLXNlcnZpY2UubWluaW8uc3ZjLmJpbmVzdHk6OTA5MA== # http://minio-service.minio.svc.binesty:9090  
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: minio
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      volumes:
      - name: minio-volume
        persistentVolumeClaim:
          claimName: nfs-minio 
      - name: minio-certificates
        secret:
          secretName: minio-secret
          items:
          - key: AWS_CERT
            path: public.crt
          - key: AWS_CERT_KEY
            path: private.key
      containers:
      - name: minio
        image: quay.io/minio/minio:latest
        command: ["sh", "-c", "mkdir -p /storage/backupbucket && exec minio server /storage"]
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: AWS_ACCESS_KEY_ID
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: AWS_SECRET_ACCESS_KEY
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: minio-volume
          mountPath: "/storage"
        - name: minio-certificates
          mountPath: "/root/certs"
          readOnly: true
        resources:
          limits:
            cpu: 500m
            memory: 800Mi
          requests:
            cpu: 500m
            memory: 800Mi          
---

apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: minio
spec:
  selector:
    app: minio
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
  sessionAffinity: ClientIP
---  

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:        
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: minio-ingress
  namespace: minio
spec:
  ingressClassName: nginx
  rules:
  - host: minio.binesty.corp
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio-service
            port:
              number: 9000
---
